<?php
namespace App\Http\Admin\User;
use Illuminate\Http\Request;
use App\Http\Controllers\CommonController;
use Illuminate\Support\Facades\Validator;
use App\Models\User\UserReg;
use App\Models\User\UserCapital;
use App\Models\User\UserWallet;
use App\Models\User\UserIntegral;

class UserController  extends CommonController{
    /***    用户信息头部      /user/user/userList
     *      前端传递必须参数：
     *      前端传递非必须参数：
     */
    public function  userList(Request $request){
        $data['page_info']=config('page.listrows');
        $data['button_info']=$request->get('anniu');

        $msg['code']=200;
        $msg['msg']="数据拉取成功";
        $msg['data']=$data;

        //dd($msg);
        return $msg;
    }

    /***    用户信息分页     /user/user/userPage
     *      前端传递必须参数：
     *      前端传递非必须参数：
     */
	public function userPage(Request $request){
        /** 接收中间件参数**/
        $group_info = $request->get('group_info');//接收中间件产生的参数
        $button_info = $request->get('anniu');//接收中间件产生的参数

        /**接收数据*/
        $num        =$request->input('num')??10;
        $page       =$request->input('page')??1;
        $tel        =$request->input('tel');
        $wx         =$request->input('wx');

        $listrows   =$num;
        $firstrow   =($page-1)*$listrows;
        $search=[
            ['type'=>'=','name'=>'delete_flag','value'=>'Y'],
            ['type'=>'like','name'=>'tel','value'=>$tel],
            ['type'=>'like','name'=>'token_name','value'=>$wx],
        ];

        $where=get_list_where($search);

        switch ($group_info['group_id']){
            case 'all':
                $data['total']=UserReg::where($where)->count(); //总的数据量

                $data['items']=UserReg::with(['userCapital' => function($query) {
                        $query->select('total_user_id','integral','money');
                        $query->where('delete_flag','=','Y');
                    }])
                    ->where($where)->offset($firstrow)->limit($listrows)->orderBy('create_time','desc')
                    ->select('self_id','total_user_id','create_time','tel','reg_type','token_img','token_name','token_appid','true_name')
                    ->get();
                break;

            case 'one':
                $data['total']=0; //总的数据量
                $data['items']=[];


                break;

            case 'more':
                $data['total']=0; //总的数据量
                $data['items']=[];

                break;
        }

//dd($data['items']->toArray());
        foreach($data['items'] as $k => $v){
            $v->integral=number_format($v->userCapital->integral/100,2);
            $v->money=number_format($v->userCapital->money/100,2);

            switch ($v->reg_type){
                case 'TEL':
                    $v->sys='glyphicon glyphicon-phone';
                    $v->title='手机注册:'.$v->tel;
                    break;

                case 'ALIPAY':
                    $v->sys='fa fa-money';
                    $v->title='支付宝授权:'.$v->token_name;
                    break;
                case 'MINI':
                    $v->sys='glyphicon glyphicon-home';
                    $v->title='小程序:'.$v->token_name;
                    break;

                case 'WEIXIN':
                    $v->sys='glyphicon glyphicon-home';
                    $v->title='公众号:'.$v->token_name;
                    break;
                default:
                    $v->sys='glyphicon glyphicon-home';
                    $v->title='公众号:'.$v->token_name;
                    break;
            }

            $v->button_info=$button_info;
        }

        //dd($data['items']->toArray());


        $msg['code']=200;
        $msg['msg']="数据拉取成功";
        $msg['data']=$data;
        //dd($msg);
        return $msg;
	}


    /***    余额拉取数据分页数据     /user/user/walletPage
     *      前端传递必须参数：
     *      前端传递非必须参数：
     */

	public function walletPage(Request $request){
        /** 接收数据*/
        $num        =$request->input('num')??10;
        $page       =$request->input('page')??1;
        $self_id    =$request->input('self_id');
        $listrows   =$num;
        $firstrow   =($page-1)*$listrows;

        $self_id='user_202007141909478567375870';

        $user_where=[
            ['total_user_id','=',$self_id],
            ['delete_flag','=','Y'],
        ];

         $data['user_info'] =UserReg::with(['userCapital' => function($query) {
             $query->select('user_id','integral','money');
             $query->where('delete_flag','=','Y');
         }])
             ->where($user_where)
             ->select('self_id','total_user_id','tel','token_img','token_name')
             ->first();




        if($data['user_info']){
            $data['user_info']->integral=number_format($data['user_info']->userCapital->integral/100,2);
            $data['user_info']->money=number_format($data['user_info']->userCapital->money/100,2);

            $where=[
                ['user_id','=',$self_id],
                ['delete_flag','=','Y'],
            ];

            $data['total']=UserWallet::where($where)->count(); //总的数据量
            $data['items']=UserWallet::where($where)
                ->offset($firstrow)->limit($listrows)->orderBy('create_time', 'desc')
                ->select('produce_type','money','produce_cause','create_time','now_money')
                ->get();




            foreach ($data['items'] as $k => $v){
                if($v->produce_type == 'IN'){
                    $v->money='+'.number_format($v->money/100,2);
                }else{
                    $v->money='-'.number_format($v->money/100,2);
                }
                $v->now_money=number_format($v->now_money/100,2);
            }

            //dd($data['items']->toArray());
        }


        $msg['code']=200;
        $msg['msg']="数据拉取成功";
        $msg['data']=$data;

        dd($msg);
        return $msg;

    }

    /***    添加金额     /user/user/addWallet
     *      前端传递必须参数：
     *      前端传递非必须参数：
     */
	public function addWallet(Request $request){
        $operationing = $request->get('operationing');//接收中间件产生的参数
        $table_name='user_capital';
        $now_time=date('Y-m-d H:i:s',time());

        $user_info = $request->get('user_info');//接收中间件产生的参数
        $input=$request->all();
        $operationing->access_cause='修改客户余额';
        $operationing->operation_type='update';
        $operationing->table=$table_name;
        $operationing->now_time=$now_time;

        /** 接收数据*/
        $user_id=$request->input('user_id');
        $value_money=$request->input('value_money');
        $change_type=$request->input('change_type');

        /*** 虚拟数据*/
        $input['user_id']=$user_id='user_202007141909478567375870';
        $input['value_money']=$value_money='10';
        $input['change_type']=$change_type='+';

	    //dump($input);

        $rules=[
            'user_id'=>'required',
            'value_money'=>'required',
            'change_type'=>'required',
        ];
        $message=[
            'user_id.required'=>'用户不能为空',
            'value_money.required'=>'数字不能为空',
            'change_type.required'=>'增加还是减少不能为空',
        ];

        $validator=Validator::make($input,$rules,$message);

//dd($operationing);
        if($validator->passes()){


            //先通过USER_id查询出这个用户的余额
            $where['user_id']=$user_id;
            $where['delete_flag']='Y';
            //查询用户中金额
            $old_info=UserCapital::where($where)->select('self_id','money','update_time')->first();



            if($change_type=='+'){
                $message='增加余额';
                $now_money=$old_info->money+$value_money*100;      //得到一个新的余额

                $data['produce_type']='IN';
                $data['produce_cause']='后台增加';


            }else{
                $message='减少余额';
                if($old_info->money > 0){
                    $now_money=$old_info->money-$value_money*100;      //得到一个新的余额

                    $data['produce_type']='CONSUME';
                    $data['produce_cause']='后台减少';

                    if($now_money<0){
                        $now_money=0;
                        $value_money=$old_info->money/100;
                    }
                }else{
                    //如果是减少，而原来的数字
                    $msg['code']=301;
                    $msg['msg']="客户余额已经为0，不用再减少了";
                    //dd($msg);
                    return $msg;
                }
            }

            //dd($data);
            $id=null;
            /** 可以开始执行事务操作了**/
            DB::beginTransaction();

            try{
                $capital['money']=$now_money;
                $capital['update_time']=$now_time;
                $id=UserCapital::where($where)->update($capital);
                //dd($capital);
                //做一个流水记录
                $data['self_id']=generate_id('wallet_');
                $data['user_id']=$user_id;
                $data['create_time']=$now_time;
                $data['money']=$value_money*100;
                $data['order_sn']=$user_info->admin_id.$user_info->name;
                $data['now_money']=$capital['money'];
                $data['now_money_md']=get_md5($capital['money']);
                $data['ip']=$request->getClientIp();
                $data['wallet_status']='SU';
                UserWallet::insert($data);

                DB::commit();
            }catch (\Exception $e) {
                //接收异常处理并回滚
                DB::rollBack();
                $msg['code']=303;
                $msg['msg']="事务打断";
                return $msg;
            }

            $operationing->table_id=$old_info->self_id;
            $operationing->old_info=$old_info;
            $operationing->new_info=$capital;


            if($id){
                $msg['code'] = 200;
                $msg['msg'] = $message."成功";
                return $msg;
            }else{
                $msg['code'] = 302;
                $msg['msg'] = $message."失败";
                return $msg;
            }


        }else{
            //前端用户验证没有通过
            $erro=$validator->errors()->all();
            $msg['code']=300;
            $msg['msg']=null;
            foreach ($erro as $k => $v){
                $kk=$k+1;
                $msg['msg'].=$kk.'：'.$v.'</br>';
            }

            return $msg;
        }

    }

    /***    积分拉取数据分页数据     /user/user/integralPage
     *      前端传递必须参数：
     *      前端传递非必须参数：
     */
    public function integralPage(Request $request){

        /** 接收数据*/
        $num=$request->input('num')??10;
        $page=$request->input('page')??1;
        $self_id=$request->input('self_id');
        $listrows=$num;
        $firstrow=($page-1)*$listrows;

        $self_id='user_202007141909478567375870';

        $user_where=[
            ['total_user_id','=',$self_id],
            ['delete_flag','=','Y'],
        ];

        $data['user_info'] =UserReg::with(['userCapital' => function($query) {
            $query->select('user_id','integral','money');
            $query->where('delete_flag','=','Y');
        }])
            ->where($user_where)
            ->select('self_id','total_user_id','tel','token_img','token_name')
            ->first();

        if($data['user_info']){
            $data['user_info']->integral=number_format($data['user_info']->integral/100,2);
            $data['user_info']->money=number_format($data['user_info']->money/100,2);

            $where=[
                ['user_id','=',$self_id],
                ['delete_flag','=','Y'],
            ];

            $data['total']=UserIntegral::where($where)->count(); //总的数据量
            $data['items']=UserIntegral::where($where)
                ->offset($firstrow)->limit($listrows)->orderBy('create_time', 'desc')
                ->select('produce_type','integral','produce_cause','create_time','now_integral')
                ->get();

            foreach ($data['items'] as $k => $v){
                if($v->produce_type == 'IN'){
                    $v->integral='+'.number_format($v->integral/100,2);
                }else {
                    $v->integral = '-' . number_format($v->integral / 100, 2);
                }
                $v->now_integral=number_format($v->now_integral/100,2);
            }


        }


        $msg['code']=200;
        $msg['msg']="数据拉取成功";
        $msg['data']=$data;

        dd($msg);
        return $msg;

    }

    /***    添加金额     /user/user/addIntegral
     *      前端传递必须参数：
     *      前端传递非必须参数：
     */
    public function addIntegral(Request $request){
        $operationing = $request->get('operationing');//接收中间件产生的参数
        $table_name='user_capital';
        $now_time=date('Y-m-d H:i:s',time());


        $operationing->access_cause='修改客户积分';
        $operationing->operation_type='update';
        $operationing->table=$table_name;
        $operationing->now_time=$now_time;


        $user_info = $request->get('user_info');//接收中间件产生的参数
        $input=$request->all();

        /** 接收数据*/
        $user_id=$request->input('user_id');
        $value_integral=$request->input('value_integral');
        $change_type=$request->input('change_type');

        /*** 虚拟数据*/
        $input['user_id']=$user_id='user_202007141909478567375870';
        $input['value_integral']=$value_integral='10';
        $input['change_type']=$change_type='+';

        //dump($input);

        $rules=[
            'user_id'=>'required',
            'value_integral'=>'required',
            'change_type'=>'required',
        ];
        $message=[
            'user_id.required'=>'用户不能为空',
            'value_integral.required'=>'数字不能为空',
            'change_type.required'=>'增加还是减少不能为空',
        ];

        $validator=Validator::make($input,$rules,$message);

//dd($table_name);
        if($validator->passes()){


            //先通过USER_id查询出这个用户的余额
            $where['user_id']=$user_id;
            $where['delete_flag']='Y';
            //查询用户中金额
            $old_info=UserCapital::where($where)->select('self_id','integral','update_time')->first();

            //dump($old_info);

            if($change_type=='+'){
                $message='增加积分';
                $now_integral=$old_info->integral+$value_integral*100;      //得到一个新的余额

                $data['produce_type']='IN';
                $data['produce_cause']='后台增加';


            }else{
                $message='减少积分';
                if($old_info->integral > 0){
                    $now_integral=$old_info->integral-$value_integral*100;      //得到一个新的余额

                    $data['produce_type']='CONSUME';
                    $data['produce_cause']='后台减少';

                    if($now_integral<0){
                        $now_integral=0;
                        $value_integral=$old_info->integral/100;
                    }
                }else{
                    //如果是减少，而原来的数字
                    $msg['code']=301;
                    $msg['msg']="客户积分已经为0，不用再减少了";
                    //dd($msg);
                    return $msg;
                }
            }

            $id=null;
            /** 可以开始执行事务操作了**/
            DB::beginTransaction();

            //dd($data);
            try{
                $capital['integral']=$now_integral;
                $capital['update_time']=$now_time;
                $id=UserCapital::where($where)->update($capital);

                //做一个流水记录
                $data['self_id']=generate_id('integral_');
                $data['user_id']=$user_id;
                $data['create_time']=$now_time;
                $data['integral']=$value_integral*100;
                $data['now_integral']=$capital['integral'];
                $data['now_integral_md']=get_md5($capital['integral']);
                $data['ip']=$request->getClientIp();
                $data['order_sn']=$user_info->admin_id.$user_info->name;
                UserIntegral::insert($data);


                DB::commit();
            }catch (\Exception $e) {
                //接收异常处理并回滚
                DB::rollBack();
            }

            $operationing->table_id=$old_info->self_id;
            $operationing->old_info=$old_info;
            $operationing->new_info=$capital;

            if($id){
                $msg['code'] = 200;
                $msg['msg'] = $message."成功";
                return $msg;
            }else{
                $msg['code'] = 302;
                $msg['msg'] = $message."失败";
                return $msg;
            }


        }else{
            //前端用户验证没有通过
            $erro=$validator->errors()->all();
            $msg['code']=300;
            $msg['msg']=null;
            foreach ($erro as $k => $v){
                $kk=$k+1;
                $msg['msg'].=$kk.'：'.$v.'</br>';
            }

            return $msg;
        }

    }



    //优惠券拉取数据分页数据
    public function user_coupon_list(Request $request){
        $input=Input::all();
        $where['self_id']=$input['user_id'];
        $user_info=DB::table('user_reg')->where($where)->select('token_img','token_name','tel','self_id')->first();
        if(!$user_info){
            $user_info=null;
        }

        //拉取可以补发的优惠券的部分
        $nowTime=date('Y-m-d H:i:s',time());
        $where1=[
            ['a.rear_give_flag','=','Y'],
            ['a.use_flag','=','Y'],
            ['a.delete_flag','=','Y'],
            ['a.get_start_time','<',$nowTime],
            ['a.get_end_time','>',$nowTime],
            ['a.coupon_inventory','>','0'],
        ];
        $coupon_type=config('shop.coupon_type');
        $canUse=DB::table('shop_coupon as a')
            ->join('erp_shop_goods as b',function($join){
                $join->on('a.all_type_id','=','b.self_id');
            }, null,null,'left')
            ->where($where1)
            ->select(
                'a.*',
                'b.good_title'
            )
            ->orderBy('a.create_time','desc')
            ->get()->toArray();
        foreach($canUse as $k => $v){
            $v->time_type_show=null;
            switch($v->time_type){
                case 'dynamic':
                    if($v->time_day>0){
                        $v->time_type_show='动态时间：领取后'.$v->time_day.'天生效，有效期'.$v->time_days.'天';
                    }else{
                        $v->time_type_show='动态时间：领取后立即生效，有效期'.$v->time_days.'天';
                    }
                    break;

                case 'assign':
                    $v->time_type_show=substr($v->time_start,0,10).'到'.substr($v->time_end,0,10).'有效';
                    break;
            }

            //折扣类型
            $v->range_type_show=null;
            switch($v->range_type){
                case 'reduce':
                    $v->range_type_show='满'.number_format($v->range_condition/100, 2).'元减'.number_format($v->range/100, 2).'元';
                    break;

                case 'discount':
                    $abccc=$v->range/10;
                    $v->range_type_show='满'.number_format($v->range_condition/100, 2).'元打'.$abccc.'折';
                    break;

                case 'reducecount':

                    $v->range_type_show='满'.$v->range_condition.'件减'.number_format($v->range/100, 2).'元';
                    break;

            }

            //领取状态
            $v->coupon_state_show=null;
            switch($v->coupon_state){
                case 'wait':
                    $v->coupon_state_show='未开始';
                    break;

                case 'process':
                    $v->coupon_state_show='进行中';
                    break;

                case 'over':
                    $v->coupon_state_show='已结束';
                    break;

                case 'time':
                    $v->coupon_state_show=$v->get_start_time.'<br>'.$v->get_end_time;
                    break;
            }

            //券类型
            $v->use_type_show=null;
            foreach ($coupon_type as $kk => $vv){
                if($v->use_type == $kk ){
                    $v->use_type_show=$vv;
                }
            }
        }
        return view('User.User.user_coupon_list',
            [
              'user_info'=>$user_info,
                'canUse'=>$canUse
            ]);


    }

    //客户优惠券信息
	public function user_coupon_page(Request $request){
        $input=Input::all();
//        $input['user_id']='user_202004021006499587468765';
//        $input['page']=1;
//        $input['num']=20;
        /**将使用时间超过现在时间的券的状态变成过期的状态**/
        $nowTime=date('Y-m-d H:i:s',time());
        $user_coupon_where_do=[
            ['user_id','=',$input['user_id']],
            ['coupon_status','=','unused'],
            ['time_end','<',$nowTime],
        ];
        $coupon_data['coupon_status']='stale';
        $coupon_data['update_time']=$nowTime;
        DB::table("user_coupon")->where($user_coupon_where_do)->update($coupon_data);
        /**将使用时间超过现在时间的券的状态变成过期的状态          结束**/

        $where['a.user_id']=$input['user_id'];
        $where['a.delete_flag']='Y';

        $count=DB::table('user_coupon as a')->where($where)->count();//总的数据量
        $page['page']=$input['page'];
        $page['num']=$input['num'];
        $page['total_page']=intval(ceil($count/$input['num']));
        $page['total_count']=$count;
        $page=page_show($page);

        $info=DB::table('user_coupon as a')
            ->join('erp_shop_goods as b',function($join){
                $join->on('a.all_type_id','=','b.self_id');
            }, null,null,'left')
            ->where($where)
            ->select(
                'a.*',
                'b.good_title'
            )
            ->orderBy('a.create_time','desc')
            ->get()->toArray();
        $coupon_type=config('shop.coupon_type');
        foreach($info as $k => $v){

            $v->time_start=substr($v->time_start,0,10);
            $v->time_end=substr($v->time_end,0,10);

            //处理下优惠的情况
            switch($v->range_type){
                case 'reducecount':
                    //满多少件减多少钱
                    $use_condition=$v->range_condition;
                    $coupon_range=number_format($v->range/100, 2);
                    $v->use_condition="满".$use_condition."件，减".$coupon_range;


                    break;
                case 'discount':
                    //折扣
                    $use_condition=number_format($v->range_condition/100, 2);
                    $coupon_range=$v->range/10;
                    $v->use_condition="满".$use_condition."，元打".$coupon_range.'折';
                    break;
                case 'reduce':
//                  	满减reduce

                    $use_condition=number_format($v->range_condition/100, 2);
                    $coupon_range=number_format($v->range/100, 2);
                    $v->use_condition="满".$use_condition."元,减".$coupon_range;
                    break;
            }

            $v->create_user_name=$v->create_user_name??'用户自领';

            //处理下状态
            switch($v->coupon_status){
                case 'unused':
                    $v->coupon_status='<font color="#1ab394">未使用</font>';
                    break;
                case 'stale':
                    $v->coupon_status='<font color="#9E9E9E">已过期</font>';
                    break;
                case 'used':
                    $v->coupon_status='<font color="#C71585">已使用</font>';
                    break;
                case 'lock':
                    $v->coupon_status='<font color="#C71585">已锁定</font>';
                    break;
            }
            foreach ($coupon_type as $kk => $vv){
                if($v->use_type == $kk ){
                    $v->use_type_show=$vv;
                }
            }
        }
//        dd($info);
        return view('User.User.user_coupon_page',['page'=>$page,'info'=>$info]);
    }

    //客户优惠券信息
    public function add_user_coupon(Request $request){
        $input=Input::all();

        $rules=[
            'user_id'=>'required',
            'coupon_id'=>'required',
        ];
        $message=[
            'user_id.required'=>'没有用户ID',
            'coupon_id.required'=>'没有优惠券',
        ];

        $validator=Validator::make($input,$rules,$message);

        //操作的表
        $table_name='user_coupon';
        //第二步，日志初始化
        $operationing['access_cause']=null;
        $operationing['browse_type']=$request->path();
        $operationing['table']=$table_name;
        $operationing['table_id']=null;
        $operationing['old_info']=null;
        $operationing['new_info']=null;
        $operationing['group_code']=session('group_code');
        $operationing['group_name']=session('group_name');
        $operationing['ip']=$request->getClientIp();
        $operationing['roll_back_flag']='N';                    //是否允许回滚
        $operationing['operation_type']='create';
        $operationing['admin_flag']='Y';                        //N为只有超级管理员可见
        $operationing['log_status']='FS';                        //初始化为失败
        $operationing['false_cause']=null;

        if($validator->passes()){
            $where['self_id']=$input['coupon_id'];
            $where['delete_flag']='Y';
            $att=DB::table('shop_coupon')->where($where)->first();
            //根据规则给用户加优惠券,现在开始做数据

            //查一下这张券该用户已有的数量
            $where_coupon['shop_coupon_id']=$att->self_id;
            $where_coupon['coupon_give_id']=1;
            $where_coupon['user_id']=$input['user_id'];
            $count=DB::table('user_coupon')->where($where_coupon)->count();
            if($count>=$att->get_limit_number){
                $msg['code']=300;
                $msg['msg']='该券已经到达用户领取上限了';
                return response()->json(['msg'=>$msg]);
            }

            $data['self_id']=generate_id('usecoupon_');
            $data['shop_coupon_id']=$att->self_id;
            $data['user_id']=$input['user_id'];
            $data['coupon_title']=$att->coupon_title;
            $data['coupon_remark']=$att->coupon_remark;
            $data['coupon_details']=$att->coupon_details;
            $now_time=date('Y-m-d H:i:s',time());
            if($att->time_type=='dynamic'){ //动态时间,以领取的时间开始计算
                if($att->time_day>0){
                    $data['time_start']=substr(date('Y-m-d H:i:s',strtotime('+'.$att->time_day.'day')),0,10);//优惠劵开始日期
                    $tempAll=$att->time_days+$att->time_day;
                    $data['time_end']=substr(date('Y-m-d H:i:s',strtotime('+'.$tempAll.'day')),0,10);
                }else{
                    $data['time_start']=substr($now_time,0,10);//优惠劵开始日期
                    $tempTime=date('Y-m-d H:i:s',strtotime('+'.$att->time_days.'day'));
                    $data['time_end']=substr($tempTime,0,10);
                }
            }else{
                $data['time_start']=$att->time_start;
                $data['time_end']=$att->time_end;
            }

            $data['range_type']=$att->range_type;
            $data['range_condition']=$att->range_condition;
            $data['range']=$att->range;

            $data['create_user_id']=session('cms_uu_id');
            $data['create_user_name']=session('cms_name');
            $data['create_time']=$data['update_time']=date('Y-m-d H:i:s',time());

            $data['use_type']=$att->use_type;
            $data['use_fallticket_flag']=$att->use_fallticket_flag;
            $data['use_self_lifting_flag']=$att->use_self_lifting_flag;
            $data['all_type_id']=$att->all_type_id;
            $data['group_code']=$att->group_code;
            $data['group_name']=$att->group_name;
            $data['get_place']='HOUTAI';
            $data['get_way']=$request->path();
            $data['cause_reason']=$input['cause_reason'];

            $id=DB::table($table_name)->insert($data);

            if($id){
                //把这个券的库存-1
                $aewiu['coupon_inventory']=$att->coupon_inventory-1;
                $wertiut['self_id']=$att->self_id;
                DB::table('shop_coupon')->where($wertiut)->update($aewiu);

                //做日志文件
                $operationing['access_cause']='给用户'.$input['user_id'].'添加优惠券:'.$att->coupon_title;
                $operationing['table_id']=$data['self_id'];
                $operationing['new_info']=(object)$data;
                $operationing['group_code']=$data['group_code'];
                $operationing['group_name']=$data['group_name'];
                $operationing['log_status']='SU';

                $msg['code']=200;
                $msg['msg']='添加优惠券成功';
            }else{
                $msg['code']=300;
                $msg['msg']='添加失败';
                $operationing['access_cause']='给用户'.$input['user_id'].'添加优惠券:'.$att->coupon_title;
                $operationing['table_id']=$data['self_id'];
                $operationing['new_info']=(object)$data;
                $operationing['group_code']=$data['group_code'];
                $operationing['group_name']=$data['group_name'];
                $operationing['false_cause']=$msg['msg'];
            }

        }else{
            //前端用户验证没有通过
            $erro=$validator->errors()->all();
            $operationing['new_info']=(object)$input;
            $msg['code']=300;
            $msg['msg']=null;

            $qiao_22=[];

            foreach ($erro as $k => $v){
                $kk=$k+1;
                $msg['msg'].=$kk.":".$v."\r\n";
                $qiao_22[]=$v;
            }

            $operationing['false_cause']=join("*",$qiao_22);

        }

        //记录操作日志
        operationing($operationing);
        return response()->json(['msg'=>$msg]);

    }


}
?>
